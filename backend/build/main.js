"use strict";
const koa = require("koa");
const serve = require("koa-static");
const mount = require("koa-mount");
const koa_router = require('koa-router');
const request = require('request');
const parse = require('csv-parse');
const r = require('rethinkdb');
const app = new koa();
var router = new koa_router();
// x-response-time
app.use(function* (next) {
    var start = new Date().getTime();
    yield next;
    var ms = new Date().getTime() - start;
    this.set('X-Response-Time', ms + 'ms');
});
// logger
app.use(function* (next) {
    var start = new Date().getTime();
    yield next;
    var ms = new Date().getTime() - start;
    console.log('%s %s - %s', this.method, this.url, ms);
});
// static
app.use(mount('/static', serve('../frontend/build')));
// responses under /api
router.get('/load', function* (next) {
    r.connect({
        host: '127.0.0.1',
        port: 28015,
        db: 'uber'
    }).then(function (connection) {
        const parser = parse({ delimiter: ',' })
            .on('error', function (err) {
            console.log(err.message);
        });
        function firstHandler() {
            // Eat the first line because it's the header
            parser.read();
            parser.removeListener('readable', firstHandler);
            parser.on('readable', mainHandler);
        }
        function mainHandler() {
            let record;
            while (record = parser.read()) {
                console.log(record);
                r.table('trips').insert({
                    date: record[0],
                    location: r.point(parseFloat(record[2]), parseFloat(record[1])),
                    base: record[3]
                }).run(connection);
            }
        }
        parser.on('readable', firstHandler);
        parser.on('finish', function () {
            r.table('trips').indexCreate('location', { geo: true }).run(connection);
        });
        request
            .get('https://github.com/fivethirtyeight/uber-tlc-foil-response/raw/master/uber-trip-data/uber-raw-data-aug14.csv')
            .pipe(parser);
    });
});
app
    .use(mount('/api', router.routes()))
    .use(mount('/api', router.allowedMethods()));
app.listen(3000);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQVksR0FBRyxXQUFNLEtBQ3JCLENBQUMsQ0FEeUI7QUFDMUIsTUFBTyxLQUFLLFdBQVcsWUFBWSxDQUFDLENBQUM7QUFDckMsTUFBTyxLQUFLLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFDcEMsTUFBWSxVQUFVLFdBQU0sWUFBWSxDQUFDLENBQUE7QUFDekMsTUFBTyxPQUFPLFdBQVcsU0FBUyxDQUFDLENBQUM7QUFDcEMsTUFBTyxLQUFLLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFDcEMsTUFBTyxDQUFDLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFFaEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUN0QixJQUFJLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO0FBRTlCLGtCQUFrQjtBQUVsQixHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSTtJQUNyQixJQUFJLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pDLE1BQU0sSUFBSSxDQUFDO0lBQ1gsSUFBSSxFQUFFLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDdEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDekMsQ0FBQyxDQUFDLENBQUM7QUFHSCxTQUFTO0FBRVQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUk7SUFDckIsSUFBSSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQyxNQUFNLElBQUksQ0FBQztJQUNYLElBQUksRUFBRSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN2RCxDQUFDLENBQUMsQ0FBQztBQUdILFNBQVM7QUFFVCxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBR3RELHVCQUF1QjtBQUV2QixNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxXQUFXLElBQUk7SUFFakMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNSLElBQUksRUFBRSxXQUFXO1FBQ2pCLElBQUksRUFBRSxLQUFLO1FBQ1gsRUFBRSxFQUFFLE1BQU07S0FDWCxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVMsVUFBVTtRQUN6QixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsRUFBQyxTQUFTLEVBQUUsR0FBRyxFQUFDLENBQUM7YUFDbkMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFTLEdBQUc7WUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUE7UUFFSjtZQUNFLDZDQUE2QztZQUM3QyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDZCxNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUNoRCxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNyQyxDQUFDO1FBRUQ7WUFDRSxJQUFJLE1BQU0sQ0FBQztZQUNYLE9BQU8sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO2dCQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUVwQixDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQztvQkFDdEIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ2YsUUFBUSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDL0QsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7aUJBQ2hCLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDckIsQ0FBQztRQUNILENBQUM7UUFFRCxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRTtZQUNsQixDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPO2FBQ0osR0FBRyxDQUFDLDZHQUE2RyxDQUFDO2FBQ2xILElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRztLQUNBLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0tBQ25DLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFHL0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMga29hIGZyb20gXCJrb2FcIlxuaW1wb3J0IHNlcnZlID0gcmVxdWlyZShcImtvYS1zdGF0aWNcIik7XG5pbXBvcnQgbW91bnQgPSByZXF1aXJlKFwia29hLW1vdW50XCIpO1xuaW1wb3J0ICogYXMga29hX3JvdXRlciBmcm9tICdrb2Etcm91dGVyJztcbmltcG9ydCByZXF1ZXN0ID0gcmVxdWlyZSgncmVxdWVzdCcpO1xuaW1wb3J0IHBhcnNlID0gcmVxdWlyZSgnY3N2LXBhcnNlJyk7XG5pbXBvcnQgciA9IHJlcXVpcmUoJ3JldGhpbmtkYicpO1xuXG5jb25zdCBhcHAgPSBuZXcga29hKCk7XG52YXIgcm91dGVyID0gbmV3IGtvYV9yb3V0ZXIoKTtcblxuLy8geC1yZXNwb25zZS10aW1lXG5cbmFwcC51c2UoZnVuY3Rpb24gKihuZXh0KXtcbiAgdmFyIHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIHlpZWxkIG5leHQ7XG4gIHZhciBtcyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnQ7XG4gIHRoaXMuc2V0KCdYLVJlc3BvbnNlLVRpbWUnLCBtcyArICdtcycpO1xufSk7XG5cblxuLy8gbG9nZ2VyXG5cbmFwcC51c2UoZnVuY3Rpb24gKihuZXh0KXtcbiAgdmFyIHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIHlpZWxkIG5leHQ7XG4gIHZhciBtcyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnQ7XG4gIGNvbnNvbGUubG9nKCclcyAlcyAtICVzJywgdGhpcy5tZXRob2QsIHRoaXMudXJsLCBtcyk7XG59KTtcblxuXG4vLyBzdGF0aWNcblxuYXBwLnVzZShtb3VudCgnL3N0YXRpYycsIHNlcnZlKCcuLi9mcm9udGVuZC9idWlsZCcpKSk7XG5cblxuLy8gcmVzcG9uc2VzIHVuZGVyIC9hcGlcblxucm91dGVyLmdldCgnL2xvYWQnLCBmdW5jdGlvbiAqKG5leHQpIHtcblxuICByLmNvbm5lY3Qoe1xuICAgIGhvc3Q6ICcxMjcuMC4wLjEnLFxuICAgIHBvcnQ6IDI4MDE1LFxuICAgIGRiOiAndWJlcidcbiAgfSkudGhlbihmdW5jdGlvbihjb25uZWN0aW9uKSB7XG4gICAgY29uc3QgcGFyc2VyID0gcGFyc2Uoe2RlbGltaXRlcjogJywnfSkgIFxuICAgICAgLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycil7XG4gICAgICAgIGNvbnNvbGUubG9nKGVyci5tZXNzYWdlKTtcbiAgICAgIH0pXG5cbiAgICBmdW5jdGlvbiBmaXJzdEhhbmRsZXIgKCkge1xuICAgICAgLy8gRWF0IHRoZSBmaXJzdCBsaW5lIGJlY2F1c2UgaXQncyB0aGUgaGVhZGVyXG4gICAgICBwYXJzZXIucmVhZCgpO1xuICAgICAgcGFyc2VyLnJlbW92ZUxpc3RlbmVyKCdyZWFkYWJsZScsIGZpcnN0SGFuZGxlcik7XG4gICAgICBwYXJzZXIub24oJ3JlYWRhYmxlJywgbWFpbkhhbmRsZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1haW5IYW5kbGVyKCkge1xuICAgICAgbGV0IHJlY29yZDtcbiAgICAgIHdoaWxlIChyZWNvcmQgPSBwYXJzZXIucmVhZCgpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlY29yZCk7XG5cbiAgICAgICAgci50YWJsZSgndHJpcHMnKS5pbnNlcnQoe1xuICAgICAgICAgIGRhdGU6IHJlY29yZFswXSxcbiAgICAgICAgICBsb2NhdGlvbjogci5wb2ludChwYXJzZUZsb2F0KHJlY29yZFsyXSksIHBhcnNlRmxvYXQocmVjb3JkWzFdKSksXG4gICAgICAgICAgYmFzZTogcmVjb3JkWzNdXG4gICAgICAgIH0pLnJ1bihjb25uZWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZXIub24oJ3JlYWRhYmxlJywgZmlyc3RIYW5kbGVyKTtcbiAgICBwYXJzZXIub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uKCkge1xuICAgICAgci50YWJsZSgndHJpcHMnKS5pbmRleENyZWF0ZSgnbG9jYXRpb24nLCB7Z2VvOiB0cnVlfSkucnVuKGNvbm5lY3Rpb24pO1xuICAgIH0pO1xuXG4gICAgcmVxdWVzdFxuICAgICAgLmdldCgnaHR0cHM6Ly9naXRodWIuY29tL2ZpdmV0aGlydHllaWdodC91YmVyLXRsYy1mb2lsLXJlc3BvbnNlL3Jhdy9tYXN0ZXIvdWJlci10cmlwLWRhdGEvdWJlci1yYXctZGF0YS1hdWcxNC5jc3YnKVxuICAgICAgLnBpcGUocGFyc2VyKTtcbiAgfSk7XG59KTtcblxuYXBwXG4gIC51c2UobW91bnQoJy9hcGknLCByb3V0ZXIucm91dGVzKCkpKVxuICAudXNlKG1vdW50KCcvYXBpJywgcm91dGVyLmFsbG93ZWRNZXRob2RzKCkpKTtcblxuXG5hcHAubGlzdGVuKDMwMDApO1xuXG5cbiJdfQ==
